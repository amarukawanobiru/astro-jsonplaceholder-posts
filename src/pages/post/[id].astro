---
import PageLayout from "../../layouts/PageLayout.astro";
import { endpoint } from "../../lib/config";
import { fetchApi } from "../../scripts/api";
import type { Post } from "../../lib/config";

export const getStaticPaths = async () => {
  const allPosts = await fetchApi(endpoint.posts);

  return allPosts.map((post: Post) => ({
    params: { id: post.id },
    props: { post, totalPages: allPosts.length },
  }))
}

const { id } = Astro.params;
const { post } = Astro.props;
const { totalPages } = Astro.props;

const pageStatus = {
  title: post.title,
  description: "I am not good at English, but I tried my best to make it."
}
---

<PageLayout title={ pageStatus.title } description={ pageStatus.description }>
  <section class="post section mt8rem">
    <h1 class="post__title">{ post.title }</h1>
    <div class="post__body">
      <p>{ post.body }</p>
    </div>
    <div class="page-links">
      {
        Number(id) - 1 > 0 ?
        <a href={ `/post/${ Number(id) - 1 }` }>{ `<<` } prev post</a> :
        <span>{ `<<` } prev post</span>
      }
      {
        Number(id) < Number(totalPages) ?
        <a href={ `/post/${ Number(id) + 1 }` }>next post { `>>` }</a> :
        <span>next post { `>>` }</span>
      }
    </div>
  </section>
</PageLayout>

<style lang="scss">
  @use "../../styles/colors" as *;

  .post {
    width: 768px;
    max-width: 100%;
    margin-left: auto;
    margin-right: auto;

    &__title {
      font-size: 3.5rem;
      font-family: "EB Garamond", serif;
    }

    &__body {
      margin-top: 4rem;
      line-height: 1.7;
    }
  }

  .page-links {
    font-size: 1rem;
    margin-top: 4rem;
    display: flex;
    justify-content: space-between;

    a {
      border-bottom: 1px solid $color-text;
      transition-property: border-color, color;
      transition-duration: 0.1s;
      transition-timing-function: ease-in-out;

      @media (hover: hover) {
        &:hover {
          border-color: $color-accent;
          color: $color-accent;
        }
      }
    }

    span {
      opacity: .3;
    }
  }
</style>